#include "AES.h"
#include <iostream>
#include <array>
#include <algorithm>

using namespace std;                                                         //Инициализация статических полей s_box и inverted s_box
const std::array<unsigned char, 256> aes_block::sub_box={                                        
0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76,
0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0,
0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15,
0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75,
0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84,
0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf,
0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8,
0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2,
0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73,
0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb,
0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79,
0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08,
0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a,
0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e,
0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf,
0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16};                      
const std::array<unsigned char, 256> aes_block::inverse_sub_box={                                
0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb,
0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb,
0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e,
0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25,
0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92,
0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84,
0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06,
0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b,
0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73,
0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e,
0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b,
0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4,
0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f,
0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef,
0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61,
0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d};

aes_block::aes_block(array<unsigned char,16> cipher_key){ //Такие себе конструкторы
    Expand_Key(cipher_key);
}
aes_block::aes_block(){}
aes_block::aes_block(const aes_block& other){
    state=other.state;
    key_schelude=other.key_schelude;
}

void aes_block::Expand_Key(array<unsigned char,16> cipher_key){    //метод расширения ключа
    static array<unsigned char,10> r_con={0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36}; //r_con таблица
    for(int i=0;i<4;i++){             //Начальный ключ
        for(int j=0;j<4;j++){
            key_schelude[i][j]=cipher_key[i+j*4];
        }}
    for(int j=4;j<44;j++){
        if (j%4!=0){
            for(int i=0;i<4;i++){
                key_schelude[i][j]=key_schelude[i][j-1]^key_schelude[i][j-4];     //Расширение для всех не 4-х столбцов
            }
        }
        else{
            for(int i=0;i<4;i++) key_schelude[i][j]=key_schelude[i][j-1];    //Сначала копируется предыдущий столбец
            
            for(int i=0;i<3;i++) swap(key_schelude[i][j],key_schelude[i+1][j]);   //RotWord, перемещаем верхний элемент столбца вниз(сдвигаем вверх, нет разницы)
            
            for(int i=0;i<4;i++) key_schelude[i][j]=sub_box[key_schelude[i][j]];  //SubBytes столбца
            
            for(int i=0;i<4;i++) key_schelude[i][j] = key_schelude[i][j]^key_schelude[i][j-4];  //XOR с предыдущим 4-м столбцом
            
            key_schelude[0][j] = key_schelude[0][j] ^ r_con[j/4 - 1];   //r_con  
            
        }
    }
}

void aes_block::AddRoundKey(int key_number){     //AddRoundKey напрямую из Key Schelude
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]=state[i][j] ^ key_schelude[i][j+4*key_number];
    }}}

void aes_block::SubBytes(){                    //Подстановка из sub_box'a
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]=sub_box[state[i][j]];
}}}

void aes_block::InvSubBytes(){                 //Подстановка из inverse sub_box'a
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]=inverse_sub_box[state[i][j]];
}}}

void aes_block::MixCollums(){                  //Умножение на матрицу в полях Галуа
    array<unsigned char,4> collumn;
    for(int j=0;j<4;j++){
        collumn[0]=GF8_mul_by_2(state[0][j])^GF8_mul_by_3(state[1][j])^state[2][j]^state[3][j];
        collumn[1]=state[0][j]^GF8_mul_by_2(state[1][j])^GF8_mul_by_3(state[2][j])^state[3][j];
        collumn[2]=state[0][j]^state[1][j]^GF8_mul_by_2(state[2][j])^GF8_mul_by_3(state[3][j]);
        collumn[3]=GF8_mul_by_3(state[0][j])^state[1][j]^state[2][j]^GF8_mul_by_2(state[3][j]);
        for(int i=0;i<4;i++) state[i][j]=collumn[i];
    }
}

void aes_block::InvMixCollums(){             //Противоположность MixCollums
    array<unsigned char,4> collumn;
    for(int j=0;j<4;j++){
        collumn[0] = GF8_mul_by_e(state[0][j]) ^ GF8_mul_by_b(state[1][j])^GF8_mul_by_d(state[2][j])^GF8_mul_by_9(state[3][j]);
        collumn[1] = GF8_mul_by_9(state[0][j]) ^ GF8_mul_by_e(state[1][j])^GF8_mul_by_b(state[2][j])^GF8_mul_by_d(state[3][j]);
        collumn[2] = GF8_mul_by_d(state[0][j]) ^ GF8_mul_by_9(state[1][j])^GF8_mul_by_e(state[2][j])^GF8_mul_by_b(state[3][j]);
        collumn[3] = GF8_mul_by_b(state[0][j]) ^ GF8_mul_by_d(state[1][j])^GF8_mul_by_9(state[2][j])^GF8_mul_by_e(state[3][j]);
        for(int i=0;i<4;i++) state[i][j]=collumn[i];
    }
}

void aes_block::ShiftRows(){                              // Циклический сдвиг влево 
    for(int i=1;i<4;i++){
        rotate(begin(state[i]),begin(state[i])+i,end(state[i]));
    }
}

void aes_block::InvShiftRows(){                           //Циклический сдвиг вправо
    for(int i=1;i<4;i++){
        rotate(begin(state[i]),end(state[i])-i,end(state[i]));
    }
}

void aes_block::BytesToMatrix(array<unsigned char,16> input){  //В матрицу
    for(int i=0;i<4;i++){
    for(int j=0;j<4;j++){
        state[i][j]=input[i+j*4];
}}}

const array<unsigned char,16> aes_block::MatrixToBytes(){  //Из матрицы
    array<unsigned char,16> output;
    for(int i=0;i<4;i++){
    for(int j=0;j<4;j++){
        output[i+j*4]=state[i][j];
        }
    }
    return output;
}

void aes_block::Encrypt(){           //Шифрование блока
    AddRoundKey(0);
    for(int round_number=1;round_number<10;round_number++){
        SubBytes();
        ShiftRows();
        MixCollums();
        AddRoundKey(round_number);
    }
    SubBytes();
    ShiftRows();
    AddRoundKey(10);
}

void aes_block::Decrypt(){         //Дешифрование
    AddRoundKey(10);
    for(int round_number=9;round_number>0;round_number--){
        InvShiftRows();
        InvSubBytes();
        AddRoundKey(round_number);
        InvMixCollums();
    }
    InvShiftRows();
    InvSubBytes();
    AddRoundKey(0);
}

const unsigned char aes_block::GF8_mul_by_2(unsigned char number){   //GF8   Умножение на 2 и производные MC
    if (number<0x80)return number<<1; //Имеет место неявное преобразование при сравнении
    return (number<<1)^0x1b;} 
    
const unsigned char aes_block::GF8_mul_by_3(unsigned char number){      
    return GF8_mul_by_2(number)^number;             // 3 как n*2+n MC
    }

const unsigned char aes_block::GF8_mul_by_9(unsigned char number){      
    return GF8_mul_by_2(GF8_mul_by_2(GF8_mul_by_2(number)))^number; // 9 как n*8+n IMC
    }

const unsigned char aes_block::GF8_mul_by_b(unsigned char number){      
    return GF8_mul_by_9(number)^GF8_mul_by_2(number); // b (11) как n*8+n*2+n (9n+2n) IMC
    }

const unsigned char aes_block::GF8_mul_by_d(unsigned char number){      
    return GF8_mul_by_9(number)^GF8_mul_by_2(GF8_mul_by_2(number)); // d (13) как n*8+n*4+n (9n+4n) IMC
    }

const unsigned char aes_block::GF8_mul_by_e(unsigned char number){      
    return GF8_mul_by_2(GF8_mul_by_2(GF8_mul_by_2(number)))^GF8_mul_by_2(GF8_mul_by_2(number))^GF8_mul_by_2(number); // e (14) как n*8+n*4+n*2 IMC
    }
    
const void aes_block::PrintState(){          //Фиктивный метод для вывода state
    for(auto i:state){
    for(auto j:i)cout<<j<<" ";
    cout<<endl;
    }}
const void aes_block::PrintSchelude(){          //Вывод ключей
    for(auto i:key_schelude){
    for(auto j:i)cout<<j<<" ";
    cout<<endl;
    }}

    
aes_block& aes_block::operator=(const aes_block& other) {       //Перегрузка присваивания
    if(this!=&other){    //Если самоприсваивание, то, зачем?
       state=other.state;
       key_schelude=other.key_schelude;
    }
    return *this; 
}

aes_block& aes_block::operator^=(const aes_block& other) {   //Поразрядная конъюнкция с присваиванием (по факту просто xor со 2 экземпляром)
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            state[i][j]=state[i][j]^other.state[i][j];
        }
    }
    return *this;
    }

aes_block aes_block::operator^(const aes_block& other)const {   //Лишнее, но пусть будет
    aes_block result;
    result.key_schelude=this->key_schelude;
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            result.state[i][j]=this->state[i][j]^other.state[i][j];
        }
    }
    return result;
    }